import Head from "next/head";
import Image from "next/image";
import { getApps, getApp, initializeApp } from "firebase/app";
import {
  getAuth,
  createUserWithEmailAndPassword,
  updateProfile,
} from "firebase/auth";
import styles from "/styles/Home.module.css";
import { firebaseConfig } from "../settings/firebaseConfig";
import React, { useEffect, useState } from "react";
import Link from "next/link";
import FormControl from '@mui/material/FormControl';
import Select, { SelectChangeEvent } from '@mui/material/Select';
import OutlinedInput from '@mui/material/OutlinedInput';
import MenuItem from '@mui/material/MenuItem';
import Chip from '@mui/material/Chip';
import InputLabel from '@mui/material/InputLabel';
import { Theme, useTheme } from '@mui/material/styles';


import { Box } from "@mui/system";
import Typography from "@mui/material/Typography";
import { Button, TextField, Card, Divider } from "@mui/material";

if (getApps().length === 0) {
  initializeApp(firebaseConfig);
}
const ITEM_HEIGHT = 48;
  const ITEM_PADDING_TOP = 8;
  const MenuProps = {
    PaperProps: {
      style: {
        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
        width: 250,
      },
    },
  };
  const names = [
    'java',
    'python',
    'react',
  ];
  
  function getStyles(name, personName, theme) {
    return {
      fontWeight:
        personName.indexOf(name) === -1
          ? theme.typography.fontWeightRegular
          : theme.typography.fontWeightMedium,
    };
  }
  
  // export default function MultipleSelectChip() {
  //   const theme = useTheme();
  //   const [personName, setPersonName] = React.useState([]);
  
  //   const handleChange = (event) => {
  //     const {
  //       target: { value },
  //     } = event;
  //     setPersonName(
  //       // On autofill we get a stringified value.
  //       typeof value === 'string' ? value.split(',') : value,
  //     );
  //   };
const Home = () => {
  const [tags, setTags] = React.useState([]);
  const theme = useTheme();
  const [personName, setPersonName] = React.useState([]);
  const [account, setAccount] = useState({
    email: "",
    password: "",
    displayName: "",
  });
  const [message, setMessage] = useState("");
  const auth = getAuth();
  const handleChange = function (e) {
    setAccount({ ...account, [e.target.name]: e.target.value });
  };
  async function handleOnClick() {
    // try {
    //   console.log("account:", account);
    //   const res = await createUserWithEmailAndPassword(
    //     auth,
    //     account.email,
    //     account.password
    //   );

    //   if (res) {
    //     await updateProfile(auth.currentUser,{displayName: account.displayName});
    //     // await addDoc(collection(db, "profile"),{character:"學習者",tag});
    //     // let addDoc = db.collection('profile').doc(uid);
    //   }
    //   setMessage("帳號已產生");
    //   console.log({ res });
    // } catch (error) {
    //   let message = "";

    //   switch (error.code) {
    //     case "auth/email-already-in-use":
    //       message = "電子信箱已註冊";
    //       break;
    //     case "auth/weak-password":
    //       message = "密碼強度不足";
    //       break;
    //     case "auth/invalid-email":
    //       message = "電子郵件格式錯誤";
    //       break;
    //     default:
    //       message = "系統錯誤:" + error.code;
    //   }
    //   setMessage(message);
    // }
  }
  

  return (
    <div>
      <Head>
        <title>個人資料</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Box display="flex" flexWrap="wrap" justifyContent="center" alignItems="center" pt={"5%"}>
        
        <Card
          display="flex"
          flexDirection="column"
          sx={{
            width: 700,
            height: 550,
            borderRadius: 2,
            m: 2
          }}
        >

          <Typography variant="h5" sx={{ textAlign: "center", m: 1 }}>個人檔案</Typography>
          <Divider />
          <Box p={2}>
            <Typography variant="body1">使用者名稱</Typography>
            <TextField
              type="text"
              name="displayName"
              value={account.displayName}
              onChange={handleChange}
              placeholder="(日後可更改)"
              margin="dense"
              fullWidth
            />
            <Typography variant="body1">聯絡信箱</Typography>
            <TextField
              type="text"
              name="email"
              value={account.email}
              placeholder="請輸入信箱"
              onChange={handleChange}
              margin="dense"
              fullWidth
            />
            <Box display="flex" alignItems="center">
                          <Typography sx={{ minWidth: 100 }}>擅長領域</Typography>
                          <FormControl sx={{ m: 1, width: 700 }}>
                              {/* <InputLabel id="demo-multiple-chip-label">Chip</InputLabel> */}
                              <Select
                                labelId="demo-multiple-chip-label"
                                id="demo-multiple-chip"
                                multiple
                                value={tags}
                                onChange={handleChange}
                                input={<OutlinedInput id="select-multiple-chip" label="Chip" />}
                                renderValue={(selected) => (
                                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
                                    {selected.map((value) => (
                                      <Chip key={value} label={value} />
                                    ))}
                                  </Box>
                                )}
                                MenuProps={MenuProps}
                              >
                                {names.map((name) => (
                                  <MenuItem
                                    key={name}
                                    value={name}
                                    style={getStyles(name, personName, theme)}
                                  >
                                    {name}
                                  </MenuItem>
                                ))}
                              </Select>
                            </FormControl>
                        </Box>
            <Button
              variant="contained"
              color="primary"
              onClick={handleOnClick}
              sx={{ m: 1 }}

            >
              新增
            </Button>
            

          </Box>
        </Card>


      </Box>
      

    </div>
  );
};
export default Home;
