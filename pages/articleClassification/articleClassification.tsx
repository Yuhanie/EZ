import type { NextPage } from 'next';
import Head from 'next/head';

import React, { useState, useEffect } from "react";
import { Fab, Paper, Table, TableBody, TableCell, TableContainer, TableRow } from "@mui/material";
import { initializeApp, getApp, getApps } from "firebase/app";
import { getFirestore, collection, getDocs } from "firebase/firestore";
import { firebaseConfig } from '../../settings/firebaseConfig';
import styles from '/styles/Home.module.css';

import ArticleListItem from '../../components/article/ArticleListItem';
import TagList from '../../components/tag/TagList';
import { Article,Tag } from '../../interfaces/entities';


import { query, orderBy, limit } from "firebase/firestore";
import Navbar from "../../components/navbar/Navbar";

//material ui
import { List, ListItem, ListItemText, CircularProgress, Divider, IconButton } from "@mui/material";
import { ClassNames } from '@emotion/react';
import { style, Box } from '@mui/system';



//////////////////////////////////////////////////////////////////////////

const firebaseApp = getApps().length === 0 ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore();

//////////////////////////////////////////////////////////////////////////

const Home: NextPage = () => {
  const [articles, setArticles] = useState<Article[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  useEffect(() => {
    async function readData() {
      setIsLoading(true);
      const querySnapshot = await getDocs(collection(db, "text"));
      //   const querySnapshot = await getDocs(collection(db, "tag"));
      const temp: Article[] = [];

      querySnapshot.forEach((doc) => {
        console.log(doc.id, doc.data());
        temp.push({ docId: doc.id, content: doc.data().content, title: doc.data().title, user: doc.data().user });
      });

      console.log(temp);

      setArticles([...temp]);
      setIsLoading(false);
    }

    readData();

  }, []);



  const test = () => {
    console.log("Hello");
  }

  const renderText = (article: Article, i: number) => {
    return (
      <ArticleListItem article={article}></ArticleListItem>
    );
  };

  const renderTag = (tag: Tag, i: number) => {
    return (
      <TagList tag={tag}></TagList>
    );

  };

  return (
    <div className={styles.container}>
      <Head>
        <title>筆記分享區</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" ></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>


      <Navbar />

      <div className={styles.classification_container}>
        <div className={styles.classification_sidebar}>
          <div className={styles.sidebar_tool}>
            <button>back</button>
            <div className={styles.classification_tag}><br />
              <h3>tag</h3>
            </div>
          </div>
          <List className={styles.line} aria-label="mailbox folders">
            <Divider />
            <ListItem button>
              <ListItemText primary="item1" />
            </ListItem>
            <Divider />
          </List>
        </div>
        <div>
          <main className={styles.main}>
            {!isLoading ?
              <div className={styles.grid}>
                {articles.map(renderText)}
              </div>
              : <CircularProgress />
            }

          </main>
        </div>
      </div>
    </div>
  )
}

export default Home

