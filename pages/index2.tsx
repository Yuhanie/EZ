import type { NextPage } from 'next';
import Head from 'next/head';

import React, { useState, useEffect } from "react";
import { Fab, Paper, Table, TableBody, TableCell, TableContainer, TableRow, Box, Input, ImageList, ImageListItem } from "@mui/material";
import { initializeApp, getApp, getApps } from "firebase/app";
import { getStorage, getDownloadURL, ref, uploadBytes } from "firebase/storage";
import { listAll } from "firebase/storage";
import { getFirestore, collection, getDocs} from "firebase/firestore";
import {firebaseConfig} from '../settings/firebaseConfig';
import styles from '../styles/Home.module.css';

import ArticleListItem from '../components/article/ArticleListItem';
// import TagList from '../components/tag/TagList';
import { Article } from '../interfaces/entities';

import { query, orderBy, limit } from "firebase/firestore";
import Navbar from "../components/navbar/Navbar";

import {List,ListItem,ListItemText,CircularProgress} from "@mui/material";


//////////////////////////////////////////////////////////////////////////

export default function App() {
  const firebaseApp = getApps().length === 0 ? initializeApp(firebaseConfig) : getApp();
  const db = getFirestore();
  const [articles, setArticles] = useState<Article[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [message, setMessage] = useState<any>("");
  const [images , setImages] = useState<any>([]);
  const [image, setImage] = useState<any>(''); 



  const storage = getStorage();

  useEffect(()=>{
    async function readData() {
      setIsLoading(true);
      const querySnapshot = await getDocs(collection(db, "text"));
      // const querySnapshot = await getDocs(collection(db, "tag"));
      const temp:Article[] = [];
      
      querySnapshot.forEach((doc) => {
        console.log(doc.id, doc.data());
        temp.push({docId: doc.id, content: doc.data().content, title: doc.data().title, user: doc.data().user, link: doc.data().link, count: doc.data().count, heart: doc.data().heart});
      });

      console.log(temp);

      setArticles(()=>[...temp]);
      setIsLoading(false);
    }
    readData();
    
//   async function readImage() {
//     try {
//       setMessage("waiting...");

//     const listRef = ref(storage, '/thumbnail');

//     const result = await listAll(listRef);

//     let temp:any[]=[];
//     // setImages(()=>[]);
//     result.items.forEach(async (image) => {         
//       let url = await getDownloadURL(image);
//       console.log("url:",url);
//       // setImages((currentImages)=>[...currentImages,{img:url, title:image.name}]);
//       temp.push({img:url, title:image.name})
//       //setImages(()=>[...temp]);
//       // console.log("temp:",temp);
//     });
  
    
//     // setImages(()=>[...temp]);
//     setMessage("");
//   }
//   catch(error){
    
//     setMessage(error);
//     console.log(error);
//   }
// }

// readImage();
  },[]);

  const renderText = (article: Article, i: number) => {
    return (
      <ArticleListItem key={article.title} article = {article}></ArticleListItem>
    );
  //   const renderTag = (tag: Tag, i: number) => {
  //       return (
  //         <TagList tag = {tag}></TagList>
  //       );
    
  };

  return (
    <div className={styles.container}>
      <Head>
      <title>筆記分享區</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" ></meta>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <Navbar/>
      </div>

      <main className={styles.main}>
        {/* <nav className={styles.navbar}>
          <div className={styles.form}>
            <h1 className={styles.title}>
              Education Zone
            </h1>
          </div>
        </nav> */}

        {!isLoading ?
            <div className={styles.grid}>
                {articles.map(renderText)}
            </div>
          :<CircularProgress />
        }

        {/* {!isLoading ?
          <div className={styles.grid}>
             {tag.map(renderTag)}
          </div>
          :<CircularProgress />
        } */}


      </main>
    </div>
  )





}

// const Home = () => {
//   const [tag, setTag] = useState<any>([]);
//   const [isLoading, setIsLoading] = useState(false);

//   useEffect(()=>{
//     async function readData() {
//       setIsLoading(true);
//       // const querySnapshot = await getDocs(collection(db, "text"));
//       const querySnapshot = await getDocs(collection(db, "tag"));
//       // const temp:Article[] = [];
//       const temp:any[] = [];
      
//       // querySnapshot.forEach((doc) => {
//       //   console.log(doc.id, doc.data());
//       //   temp.push({docId:doc.id, content:doc.data().content, title:doc.data().title, user:doc.data().user});
//       // });
//       querySnapshot.forEach((doc) => {
//         console.log(doc.id, doc.data());
//         temp.push({name:doc.data().name});
//       });

//       console.log(temp);

//       setTag(()=>[...temp]);
//       setIsLoading(false);
//     }

//     readData();

//   },[]);

// const test = () => {
// console.log("Hello");
// }



// return (
//   <div className={styles.container}>
//     <Head>
//     <title>筆記分享區</title>
//       <meta name="description" content="Generated by create next app" />
//       <meta name="viewport" content="width=device-width, initial-scale=1" ></meta>
//       <link rel="icon" href="/favicon.ico" />
//     </Head>

//     <div>
//       <Navbar/>
//     </div>

//     <main className={styles.main}>
//       {/* <nav className={styles.navbar}>
//         <div className={styles.form}>
//           <h1 className={styles.title}>
//             Education Zone
//           </h1>
//         </div>
//       </nav> */}

//       {!isLoading ?
//           <div className={styles.grid}>
//               {articles.map(renderText)}
//           </div>
//         :<CircularProgress />
//       }

//       {/* {!isLoading ?
//         <div className={styles.grid}>
//            {tag.map(renderTag)}
//         </div>
//         :<CircularProgress />
//       } */}


//     </main>
//   </div>
// )
// }
